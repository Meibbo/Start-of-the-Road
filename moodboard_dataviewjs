```dataviewjs
// ====== CONFIG ======
const DAILY_FOLDER = "Life/Calendar/Days"; // change if your daily notes live in another folder
// ====================

const weekName = dv.current().file.name;           // e.g. "2025-W35"
const weekPage = dv.page(weekName);                // Dataview page for the week (may be undefined)

// normalize various shapes of the `up` property into strings
function upToStrings(up){
  if(up === undefined || up === null) return [];
  if(Array.isArray(up)) return up.map(x => String(x));
  return [String(up)];
}
function stripBrackets(s){
  return String(s).replace(/^\[\[|\]\]$/g, "").trim();
}

// returns true if an up value (string form) refers to this weekly note
function upRefersToWeek(upStr){
  const cleaned = stripBrackets(upStr);
  if(cleaned === weekName) return true;                       // exact name match
  if(weekPage && upStr.includes(weekPage.file.path)) return true; // matches path if we found the week page
  if(upStr.includes(weekName)) return true;                   // partial-match fallback
  return false;
}

// pick a source: the Daily Notes folder if there are pages there, otherwise whole vault
let folderPages = dv.pages(`"${DAILY_FOLDER}"`);
if(!folderPages || folderPages.length === 0) folderPages = dv.pages();

// collect pages that define an `up` property
let candidates = folderPages.where(p => p.up).array();

// filter to the ones that actually reference this week
let matched = candidates.filter(p => {
  const ups = upToStrings(p.up);
  return ups.some(u => upRefersToWeek(u));
});

// ---------- Output ----------
if(matched.length){
  // sort by filename (adjust if you prefer date parsing)
  matched.sort((a,b) => a.file.name.localeCompare(b.file.name));

  // display table: Day (link) and Score (number or —)
  dv.table(
    ["Day","Score"],
    matched.map(p => [
      p.file.link,
      (() => {
        const n = Number(p.score);
        return Number.isFinite(n) ? n : "—";
      })()
    ])
  );

  // compute numeric formulas
  const scores = matched.map(p => Number(p.score)).filter(n => Number.isFinite(n));
  if(scores.length){
    const sum = scores.reduce((a,b) => a + b, 0);
    dv.paragraph(`**Average:** ${(sum / scores.length).toFixed(2)}  \n**Min:** ${Math.min(...scores)}  \n**Max:** ${Math.max(...scores)}`);
  } else {
    dv.paragraph("No numeric `score` values found in the matching notes.");
  }
} else {
  // nothing matched — show diagnostics so you can inspect what's stored in `up` across notes
  dv.paragraph(`No daily notes found that link to **${weekName}** via the \`up\` property.`);

  if(candidates.length){
    dv.paragraph("Diagnostic: here are pages that *do* have an `up` property (first 50):");
    const diag = candidates.slice(0,50).map(p => [
      p.file.link,
      upToStrings(p.up).map(stripBrackets).join(" / ")
    ]);
    dv.table(["Page", "up (normalized)"], diag);
  } else {
    dv.paragraph("No pages with an `up` property were found in the selected folder/vault.");
  }

  dv.paragraph("Quick checks:\n" +
    "- `up` should be a link (e.g. `up: [[2025-W35]]`) or include the week name/path.\n" +
    "- `score` should be a number (e.g. `score: 5`), not a word like `five`.\n" +
    `- If your daily notes are not in the folder named "${DAILY_FOLDER}", either move them there or change the DAILY_FOLDER variable at the top of this snippet.`
  );
}
```
