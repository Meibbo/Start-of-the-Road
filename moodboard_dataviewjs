```dataviewjs
// ====== CONFIG (no need to change unless you moved folders) ======
const DAILY_FOLDER = "Life/Calendar/Days";
// Emojis used (change if you prefer other moon glyphs)
const FULL_MOON = "🌕";
const HALF_MOON = "🌗";   // half-moon shown when decimal >= .5
const EMPTY_MOON = "🌑";
// Faces from lowest to highest
const FACES = ["😞","☹️","😕","😐","🙂","😃","😎"];
// =================================================================

const weekName = dv.current().file.name; // e.g. "2025-W35"
const weekPage = dv.page(weekName);

function upToStrings(up){
  if(up === undefined || up === null) return [];
  if(Array.isArray(up)) return up.map(x => String(x));
  return [String(up)];
}
function stripBrackets(s){ return String(s).replace(/^\[\[|\]\]$/g, "").trim(); }
function upRefersToWeek(upStr){
  const cleaned = stripBrackets(upStr);
  if(cleaned === weekName) return true;
  if(weekPage && String(upStr).includes(weekPage.file.path)) return true;
  if(String(upStr).includes(weekName)) return true;
  return false;
}

let folderPages = dv.pages(`"${DAILY_FOLDER}"`);
if(!folderPages || folderPages.length === 0) folderPages = dv.pages();
let candidates = folderPages.where(p => p.up).array();
let matched = candidates.filter(p => upToStrings(p.up).some(u => upRefersToWeek(u)));

if(matched.length){
  matched.sort((a,b) => a.file.name.localeCompare(b.file.name));

  // build rows: [Day, ratingElement]
  const rows = matched.map(p => {
    const rawScore = Number(p.score);
    const hasNumeric = Number.isFinite(rawScore);

    // face selection based on numeric value (user rules):
    let face = "—";
    if(hasNumeric){
      if(rawScore <= 1) face = FACES[0];
      else if(rawScore <= 2) face = FACES[1];
      else if(rawScore <= 3) face = FACES[2];
      else if(rawScore <= 4) face = FACES[3];
      else if(rawScore <= 5) face = FACES[4];
      else if(rawScore <= 6.2) face = FACES[5];
      else face = FACES[6];
    }

    // visual moons: compute display using clamped value (0..7)
    const displayValue = hasNumeric ? Math.max(0, Math.min(7, rawScore)) : 0;
    const fullCount = Math.floor(displayValue);
    const decimal = displayValue - fullCount;
    const halfCount = decimal >= 0.5 ? 1 : 0;
    const emptyCount = 7 - fullCount - halfCount;

    const moons = FULL_MOON.repeat(fullCount) + (halfCount ? HALF_MOON : "") + EMPTY_MOON.repeat(Math.max(0, emptyCount));

    // tooltip string (shows original numeric if present, one decimal; otherwise —/7)
    const tooltip = hasNumeric ? `${rawScore.toFixed(1)}/7` : `—/7`;

    // create an element with tooltip (title) so hovering shows the numeric
    const el = dv.el("span", `${moons} | ${face}`, { title: tooltip });

    return [p.file.link, el];
  });

  dv.table(["Day", "Rating"], rows);

} else {
  dv.paragraph(`No daily notes found that link to **${weekName}** via the \`up\` property.`);
  if(candidates.length){
    dv.paragraph("Diagnostic: pages with an `up` property (first 50):");
    const diag = candidates.slice(0,50).map(p => [p.file.link, upToStrings(p.up).map(stripBrackets).join(" / ")]);
    dv.table(["Page","up (normalized)"], diag);
  } else dv.paragraph("No pages with an `up` property were found in the selected folder/vault.");
}

```
